
3621340000597



aws rds describe-db-instances

oktad dev -- aws s3 ls --region ap-southeast-1

oktad dev -- aws ec2 describe-instances | grep dbops


-- mysqlbinlog --read-from-remote-server --host=spring-db01.ctderk2uub80.ap-southeast-1.rds.amazonaws.com -u v-root-spring-rds-wy0y15zyyv59z7  -p mysql-bin-changelog.016615 >binlog.sql

sudo yum install mysql56

sudo yum install MySQL-python

brew install caskroom/cask/mysql-connector-python

brew install mysql
brew services start mysql

Local -- ansible-playbook createdb_working.yml --extra-vars "ansible_python_interpreter=/usr/local/bin/python"

ansible-playbook -i "localhost," -c local --extra-vars "ansible_python_interpreter=/usr/local/bin/python" playbooks/createdb.yml

ansible-playbook playbooks/createdb.yml --extra-vars "ansible_python_interpreter=/usr/local/bin/python"

Remote -- ansible-playbook  -c local --extra-vars "ansible_python_interpreter=/usr/local/bin/python" playbooks/createdb.yml


RDS Password gen:
----------------

curl "https://dev-vaultapi01.corp.grabpay.com/v1/database/creds?t=rdse&p=dba"

curl "https://stg-vaultapi01.corp.grabpay.com/v1/database/creds?t=rds&p=dba"

curl "https://vaultapi01.corp.grabpay.com/v1/database/creds?t=rds&p=dba" 

#######################AWS ACCOUNTS#######################

Central Account:

https://signin.aws.amazon.com/switchrole?roleName=Central-DBOps-Expert&account=grabpay-central

Dev Account:

https://signin.aws.amazon.com/switchrole?roleName=Dev-DBOps-Expert&account=grabpay-dev

Prod Account:

https://signin.aws.amazon.com/switchrole?roleName=Prod-DBOps-Expert&account=grabpay-prod


#######################

ALTER TABLE txn_details DROP INDEX idx_txn_details_txn_key;
CREATE INDEX idx_txn_details_txn_key_txn_val ON txn_details (txn_key,txn_val);
CREATE INDEX idx_unique_id ON vendor_results (unique_id);

############################

curl "https://vaultapi01.corp.grabpay.com/v1/database/creds?t=rds&p=dba" | cut -d'"' -f19
curl "https://vaultapi01.corp.grabpay.com/v1/database/creds?t=rds&p=dba" | cut -d'"' -f22

###############riskdb#####

mysql -u v-root-dev-riskse-48xpsr2tz8wvt2 -h risk-dev-db01.crag0tuqe2dw.ap-southeast-1.rds.amazonaws.com -p
A1a-r6053r5t5w564ru4


1. ALTER TABLE vendor_results ADD COLUMN transaction_id VARCHAR(80);
2. UPDATE vendor_results v JOIN txn_details t  ON v.unique_id = t.unique_id  SET v.transaction_id = t.txn_val WHERE v.transaction_id is NULL and t.txn_key='txnId';
3. CREATE INDEX transaction_index ON vendor_results(transaction_id);

CREATE INDEX vendor_results on 


ALTER TABLE vendor_results ADD INDEX 'transaction_index' ('transaction_id');



ALTER TABLE txn_details DROP INDEX idx_txn_details_txn_key;

CREATE INDEX idx_txn_details_txn_key_txn_val ON txn_details (txn_key,txn_val);

CREATE INDEX idx_unique_id ON vendor_results (unique_id);


mysql> explain SELECT `id`,`unique_id`,`user_id`,`checkpoint`,`txn_key`,`txn_val`,`created_on` FROM txn_details WHERE  txn_Key = 'txnId' and txn_Val = '7633685e0c484045b01662fed06892cd' ;
+----+-------------+-------------+------------+------+-------------------------+-------------------------+---------+-------+---------+----------+-------------+
| id | select_type | table       | partitions | type | possible_keys           | key                     | key_len | ref   | rows    | filtered | Extra       |
+----+-------------+-------------+------------+------+-------------------------+-------------------------+---------+-------+---------+----------+-------------+
|  1 | SIMPLE      | txn_details | NULL       | ref  | idx_txn_details_txn_key | idx_txn_details_txn_key | 122     | const | 3939012 |    10.00 | Using where |
+----+-------------+-------------+------------+------+-------------------------+-------------------------+---------+-------+---------+----------+-------------+


mysql> explain SELECT `id`,`unique_id`,`user_id`,`checkpoint`,`txn_key`,`txn_val`,`created_on` FROM txn_details WHERE  txn_Key = 'txnId' and txn_Val = '7633685e0c484045b01662fed06892cd' ;
+----+-------------+-------------+------------+------+---------------------------------+---------------------------------+---------+-------------+------+----------+-------+
| id | select_type | table       | partitions | type | possible_keys                   | key                             | key_len | ref         | rows | filtered | Extra |
+----+-------------+-------------+------------+------+---------------------------------+---------------------------------+---------+-------------+------+----------+-------+
|  1 | SIMPLE      | txn_details | NULL       | ref  | idx_txn_details_txn_key_txn_val | idx_txn_details_txn_key_txn_val | 244     | const,const |    1 |   100.00 | NULL  |
+----+-------------+-------------+------------+------+---------------------------------+---------------------------------+---------+-------------+------+----------+-------+


#########
For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.

SELECT table_name AS "Table", round(((data_length + index_length) / 1024 / 1024), 2) as size FROM information_schema.TABLES WHERE table_schema = "riskdb" ORDER BY size DESC;

SELECT table_name AS "Table", round(((data_length + index_length) / 1024 / 1024/1024), 2) as size in GB FROM information_schema.TABLES WHERE table_schema = "stg_xm_roleservice_db01" ORDER BY size DESC;



DB deployment and rollback plan:
-------------------------------

deployment plan : 

1. ALTER TABLE vendor_results ADD COLUMN transaction_id VARCHAR(80) AFTER unique_id;
2. UPDATE vendor_results v JOIN txn_details t ON v.unique_id = t.unique_id SET v.transaction_id = t.txn_val WHERE v.transaction_id is NULL and t.txn_key='txnId' and v.vendor='CashShield';
3. CREATE INDEX transaction_index ON vendor_results(transaction_id);

4. ALTER TABLE txn_details DROP INDEX idx_txn_details_txn_key_txn_val;

rollback plan (to previous DB stat):

1. ALTER TABLE vendor_results DROP COLUMN transaction_id ;
2. CREATE INDEX idx_txn_details_txn_key_txn_val ON txn_details (txn_key,txn_val);



ALTER TABLE table_name DROP INDEX index_name;

ALTER TABLE vendor_results DROP INDEX idx_unique_id;


ALTER TABLE vendor_results DROP INDEX idx_unique_id;
ALTER TABLE txn_details DROP INDEX idx_txn_details_txn_key_txn_val;

INSERT INTO txn_details (`unique_id`,`user_id`,`checkpoint`,`txn_key`,`txn_val`,`created_on`) VALUES ('8b46903edc7342aaa79ff6d0b8d4170e', 2377925, 'P2M', 'receiverId', '256599130148865', '2018-04-10 12:42:39'



mysql> UPDATE vendor_results v JOIN txn_details t 
    -> ON v.unique_id = t.unique_id 
    -> SET v.transaction_id = t.txn_val
    -> WHERE v.transaction_id is NULL and t.txn_key='txnId' and v.vendor='CashShield';

Query OK, 1935008 rows affected (1 min 54.54 sec)
Rows matched: 1935008  Changed: 1935008  Warnings: 0

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



############################
Standard Config file 5.7



## Settings - InnoDB
innodb_log_file_size=2048M
innodb_monitor_enable=ALL
innodb_print_all_deadlocks=ON 
innodb_rollback_on_timeout=ON
innodb_undo_log_truncate=ON
innodb_undo_tablespaces=4



## Settings - CharacterSet
character_set_server=utf8
skip-character-set-client-handshake

## Settings - General
event_scheduler=ON
explicit_defaults_for_timestamp
group_concat_max_len=524288
lock_wait_timeout=3600
max_connections=500
max_allowed_packet=16777216
open_files_limit=65535
skip_name_resolve=ON
query_cache_size=0


slow_query_log=ON

## Settings - Password Validation
default_password_lifetime=366
validate_password_length=12
validate_password_mixed_case_count=2
validate_password_number_count=2
validate_password_special_char_count=2




##########################################



query_cache_type=1
query_cache_limit=20971520
query_cache_size=1073741824
	
	       

>>>>>>>>>
mysql> ALTER TABLE hourly_rollups DROP INDEX hourly_rollups_id;
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX hourly_rollups_id ON hourly_rollups (from_user_id,to_user_id,tx_type,year,day_number);
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> explain  SELECT * FROM hourly_rollups WHERE  from_user_id = 91576789 AND to_user_id = 321949506995201 AND tx_type = 40 AND   year = 2018 AND   day_number >= 80 AND    day_number <= 100;
+----+-------------+----------------+------------+-------+-------------------+-------------------+---------+------+------+----------+-----------------------+
| id | select_type | table          | partitions | type  | possible_keys     | key               | key_len | ref  | rows | filtered | Extra                 |
+----+-------------+----------------+------------+-------+-------------------+-------------------+---------+------+------+----------+-----------------------+
|  1 | SIMPLE      | hourly_rollups | NULL       | range | hourly_rollups_id | hourly_rollups_id | 22      | NULL |    6 |   100.00 | Using index condition |
+----+-------------+----------------+------------+-------+-------------------+-------------------+---------+------+------+----------+-----------------------+
1 row in set, 1 warning (0.00 sec)
<<<<<<<<<<<<<



general_log=0
slow_query_log=1
log_queries_not_using_indexes=1
innodb_large_prefix=ON
innodb_log_buffer_size=16777216
innodb_log_file_size=1073741824
innodb_purge_threads=4
innodb_read_io_threads=8
innodb_sort_buffer_size=1048576
innodb_stats_persistent_sample_pages=200
innodb_write_io_threads=6
key_buffer_size=67108864
max_allowed_packet=16777216
join_buffer_size=2097152Â 


###### DC Replication

--all-databases

---databases 

mysqldump --master-data=2 --flush-logs --single-transaction 

CREATE USER 'refuser'@'%' IDENTIFIED BY 'byRMkdMtfm2KA38B';  
GRANT REPLICATION CLIENT,REPLICATION SLAVE ON *.* TO 'refuser'@'%';

change master to master_host='', master_password='byRMkdMtfm2KA38B', master_user='refuser', master_log_file='', master_log_pos=; 

innodb_log_buffer_size=16777216
innodb_log_file_size=1073741824
innodb_purge_threads=4
innodb_read_io_threads=8
innodb_write_io_threads=6

[mysqld]
server-id               = 2  

##################


git clone git@bitbucket.org:grab-munikris/terraformer.git
git remote add  git@bitbucket.org:grabpay/terraformer.git
cd terraformer
git remote add  git@bitbucket.org:grabpay/terraformer.git
git remote add origin git@bitbucket.org:grabpay/terraformer.git
git remote add upstream git@bitbucket.org:grabpay/terraformer.git
git remote 
git pull upstream master
git branch KRONOS-1390
git branch
git checkout KRONOS-1390
Edit the code
Change to working directory
git diff
git status
git add ./[file_name]
git commit -m "KRONOS-1390.: message"
git push -u origin  KRONOS-1390
create a PR

###########

Fork the git repo from bitbucket
git clone git@bitbucket.org:grab-munikris/terraformer.git
cd terraformer/
git remote add upstream git@bitbucket.org:grabpay/terraformer.git
git pull upstream master
git branch  KRONOS-1390
git checkout  KRONOS-1390 
After editing code
-------------------
cd to the directory containing changed code
git diff
git status
git add ./[file_name]
git commit -m "KRONOS-1390.: message"
git push -u origin  KRONOS-1390 
create a PR

#################################

Postgresql:
-----------

psql -h stg-grabid-gw-db01.crag0tuqe2dw.ap-southeast-1.rds.amazonaws.com  -W  -U stg_grabid_gw_usr01 -d stg_grabid_gw_db01
SELECT datname,pid,state,query FROM pg_stat_activity

select count(*) from pg_stat_activity ;


Backup : pg_dump -h stg-grabid-gw-db01.crag0tuqe2dw.ap-southeast-1.rds.amazonaws.com  -W  -U stg_grabid_gw_usr01 stg_grabid_gw_db01>stg_grabid_gw_db01_backup
Restore: psql -h stg-grabid-gw-db01.crag0tuqe2dw.ap-southeast-1.rds.amazonaws.com  -W  -U stg_grabid_gw_usr01 stg-replica-apigw-db02 < stg_grabid_gw_db01_backup

Process list : SELECT * FROM pg_stat_activity;

List databases: \l
List tables : \dt
List users : \du

create database "stg-replica-01";


CREATE USER stgreplicauser;
alter user stgreplicauser with encrypted password 'hYBNhcHzdqmcEyCa';
ALTER ROLE stgreplicauser VALID UNTIL 'infinity';
ALTER ROLE stgreplicauser CREATEROLE CREATEDB;
ALTER ROLE stgreplicauser VALID UNTIL 'infinity';

GRANT CONNECT on DATABASE "stg-replica" to "stgreplicauser";
grant all privileges on database "stg-replica" to "stgreplicauser";


create database "stg-replica-01";
GRANT CONNECT on DATABASE "stg-replica-01" to "stgreplicauser";
grant all privileges on database "stg-replica-01" to "stgreplicauser";

#################################









CREATE USER 'helios'@'%' IDENTIFIED BY 'NGut@yG7kN1F&HjpUJ';
GRANT SELECT ON spring_db03.* TO 'helios'@'%';
GRANT REPLICATION CLIENT ON *.* TO 'helios'@'%';


CREATE USER 'data'@'%' IDENTIFIED BY 'hx8z1Mhg5Lr@nuGHJx';
GRANT SELECT ON spring_db03.* TO 'data'@'%';
GRANT REPLICATION CLIENT ON *.* TO 'data'@'%';


CREATE USER 'data_engineer'@'%' IDENTIFIED BY 'EG9sH@XAgT2ye6yh1H';
GRANT SELECT,INDEX,ALTER,CREATE,DROP,INSERT ON spring_db03.* TO 'data_engineer'@'%';
GRANT PROCESS ON *.* TO 'data_engineer'@'%';



CREATE USER 'data_engineer'@'%' IDENTIFIED BY 'EG9sH@XAgT2ye6yh1H';
GRANT SELECT,INDEX ON spring_db03.* TO 'data_engineer'@'%';
GRANT PROCESS ON *.* TO 'data_engineer'@'%';




User: helios
Pwd: NGut@yG7kN1F&HjpUJ
Database : spring_db03
Privs: select and check replication status

User: data
Pwd: hx8z1Mhg5Lr@nuGHJx
Database : spring_db03
Privs: select and check replication status

User: data_engineer
Pwd: EG9sH@XAgT2ye6yh1H
Database : spring_db03
Privs: select and index creation





mysql -A -h userservice-db01.ctderk2uub80.ap-southeast-1.rds.amazonaws.com -u v-root-user-servi-7x4v1x7qxxwsu5 -p
A1a-p02uypy857r2yusw



https://github.com/adithyakhamithkar/ansible-playbooks/tree/master/MySql
<>>>>>
#/bin/bash
TARGET=$1
DATABASE=$2
DESTINATION=$3
echo "Starting...To dump database("$DATABASE")"
ansible-playbook -i inventory/hosts mysql-dump.yml -e "inventory="$TARGET" database_name="$DATABASE"" -vvvv
echo "Transfering the database("$DATABASE") to "$DESTINATION""
ansible-playbook -i inventory/hosts mysql-transfer-db.yml -e "inventory="$TARGET" database_name="$DATABASE" target_host="$DESTINATION"" -vvvv
echo "Importing the database("$DATABASE")"
ansible-playbook -i inventory/hosts mysql-import.yml -e "inventory="$DESTINATION" database_name="$DATABASE"" -vvvv
exit
>>>>




# Create a new database with name 'bobdata'
- mysql_db: name=bobdata state=present

# Copy database dump file to remote host and restore it to database 'my_db'
- copy: src=dump.sql.bz2 dest=/tmp
- mysql_db: name=my_db state=import target=/tmp/dump.sql.bz2

# Dumps all databases to hostname.sql
- mysql_db: state=dump name=all target=/tmp/{{ inventory_hostname }}.sql

# Imports file.sql similar to mysql -u <username> -p <password> < hostname.sql
- mysql_db: state=import name=all target=/tmp/{{ inventory_hostname }}.sql














mysql  -A -h spring-bi-rds01.sg.aws.grabpay.com -u v-root-spring-rds-53z8uruxrs889q -p

A1a-rz24zvu1pur0wwqq





TRANSACTIONS_LEDGER
======================
create index  TRANSACTIONS_LEDGER_IDX1 on  TRANSACTIONS_LEDGER( TXNDATE);
create index  TRANSACTIONS_LEDGER_IDX2 on  TRANSACTIONS_LEDGER( TXNMODIFIEDDATE);

CUSTOMER_TRANSACTIONS
=========================
create index  CUSTOMER_TRANSACTIONS_IDX1 on CUSTOMER_TRANSACTIONS( TXNDATE);
create index  CUSTOMER_TRANSACTIONS_IDX2 on  CUSTOMER_TRANSACTIONS( TXNMODIFIEDDATE);

CUSTOMER_REGISTRATION_DTLS
==========================
create index  CUSTOMER_REGISTRATION_DTLS_IDX1 on  CUSTOMER_REGISTRATION_DTLS(CREATEDDATE);
create index  CUSTOMER_REGISTRATION_DTLS_IDX2 on  CUSTOMER_REGISTRATION_DTLS(MODIFIEDDATE);

ACCOUNT_BALANCE
==================
create index  ACCOUNT_BALANCE_IDX1 on  ACCOUNT_BALANCE(CREATEDDATE);
create index  ACCOUNT_BALANCE_IDX2 on  ACCOUNT_BALANCE(MODIFIEDDATE);

ACCOUNT_DTLS
================
create index  ACCOUNT_DTLS_IDX1 on ACCOUNT_DTLS(CREATEDDATE);
create index  ACCOUNT_DTLS_IDX2 on  ACCOUNT_DTLS(MODIFIEDDATE);

CUSTOMER_CONTACT_DTLS
========================
create index  CUSTOMER_CONTACT_DTLS_IDX1 on CUSTOMER_CONTACT_DTLS(CREATEDDATE);
create index  CUSTOMER_CONTACT_DTLS_IDX2 on  CUSTOMER_CONTACT_DTLS(MODIFIEDDATE);

CUSTOMER_REG_ADD_DTLS
========================
create index  CUSTOMER_REG_ADD_DTLS_IDX1 on CUSTOMER_REG_ADD_DTLS(CREATEDDATE);
create index  CUSTOMER_REG_ADD_DTLS_IDX2 on  CUSTOMER_REG_ADD_DTLS(MODIFIEDDATE);





>>>>>>
# Create a new database with name 'bobdata'
- mysql_db: name=bobdata state=present

# Copy database dump file to remote host and restore it to database 'my_db'
- copy: src=dump.sql.bz2 dest=/tmp
- mysql_db: name=my_db state=import target=/tmp/dump.sql.bz2

# Dumps all databases to hostname.sql
- mysql_db: state=dump name=all target=/tmp/{{ inventory_hostname }}.sql

# Imports file.sql similar to mysql -u <username> -p <password> < hostname.sql
- mysql_db: state=import name=all target=/tmp/{{ inventory_hostname }}.sql
<<<<<<





Cron -- https://s3.console.aws.amazon.com/s3/buckets/prod-userservice-rds-dump/2018/05/15/?region=ap-southeast-1&tab=overview




ALTER TABLE table_name MODIFY COLUMN column_name datatype;


ALTER TABLE hourly_rollups_bak MODIFY COLUMN from_user_id varchar(45);

ALTER TABLE hourly_rollups_bak MODIFY COLUMN to_user_id varchar(45);



passgen=`curl "https://vaultapi01.corp.grabpay.com/v1/database/creds?t=rdse&p=dba"`

Pwd=`echo $passgen  | cut -d'"' -f18`
User=`echo $passgen  | cut -d'"' -f22`



mysql -u $User -p$Pwd -h $1



userservice-dbe01.ctderk2uub80.ap-southeast-1.rds.amazonaws.com


curl "https://vaultapi01.corp.grabpay.com/v1/database/creds?t=rds&p=dba"






#!/bin/bash
date=`date +%Y/%m/%d`
bucket_name="prod-userservice-rds-dump"
passgen=`curl "https://vaultapi01.corp.grabpay.com/v1/database/creds?t=rdse&p=dba"`

pwd=`echo $passgen  | cut -d'"' -f18`
user=`echo $passgen  | cut -d'"' -f22`

mysqldump -u $user -p$pwd -h userservice-dbe01.ctderk2uub80.ap-southeast-1.rds.amazonaws.com \
--port 3306 \
--username $user \
--region ap-southeast-1` \
--ssl-ca=/app/rds/dump/rds-combined-ca-bundle.pem \
--enable-cleartext-plugin user_service > userservice-dump.sql
#gzip userservice-dump.sql | aws s3 cp userservice-dump.sql.gz  s3://$bucket_name/$date/
aws s3 cp userservice-dump.sql s3://$bucket_name/$date/
rm -f userservice-dump.sql



docker ps
docker logs mysql1
docker inspect  mysql1
docker exec -it mysql1 bash

MYSQL_USER="coreosuser"
MYSQL_DATABASE="enterpriseregistrydb"
MYSQL_CONTAINER_NAME="mysql"
MYSQL_ROOT_PASSWORD="s07Gadkjad@9D135dfkgjn"
MYSQL_PASSWORD="S89adkjad@9D135dfkgjn"





resource "aws_db_instance" "xtramile-dbe01-replica" {
  identifier                          = "xtramile-bi01"
  instance_class                      = "db.m4.large"
  vpc_security_group_ids              = ["${aws_security_group.rds_xtramile.id}"]
  replicate_source_db                 = "${module.xtramile-dbe01.id}"
  parameter_group_name                = "default.mysql5.7"
  storage_encrypted                   = true
  iam_database_authentication_enabled = true
  multi_az                            = true
  skip_final_snapshot                 = false
  copy_tags_to_snapshot               = false
  backup_retention_period             = 35
  apply_immediately                   = true

  tags {
    tag_component_name = "spring"
    tag_cost_center    = "spring"
    Name               = "xtramile-bi-rds01.sg.aws.grabpay.com"
    tag_jira           = "KRONOS-1412"
    tag_env            = "prod"
  }
}
}


>>>>>>>>>>>>>>>>
ITIN000007-MAC:dbaops-scripts munikrishna.chappidi$ git clone git@bitbucket.org:grab-munikris/dbops.git
Cloning into 'dbops'...
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.
ITIN000007-MAC:dbaops-scripts munikrishna.chappidi$ cd dbops/
ITIN000007-MAC:dbops munikrishna.chappidi$ ls -l
total 8
-rw-r--r--  1 munikrishna.chappidi  munikrishna.chappidi  565 May 21 17:24 README.md
ITIN000007-MAC:dbops munikrishna.chappidi$ git remote add upstream git@bitbucket.org:grabpay/dbops.git
ITIN000007-MAC:dbops munikrishna.chappidi$ git branch
ITIN000007-MAC:dbops munikrishna.chappidi$ git checkout -b "test"
Switched to a new branch 'test'
ITIN000007-MAC:dbops munikrishna.chappidi$ mkdir scripts
ITIN000007-MAC:dbops munikrishna.chappidi$ git add .
ITIN000007-MAC:dbops munikrishna.chappidi$ git commit -m "First commit"
On branch test
nothing to commit, working tree clean
ITIN000007-MAC:dbops munikrishna.chappidi$ git branch
  master
* test
ITIN000007-MAC:dbops munikrishna.chappidi$ git push -u origin test
Total 0 (delta 0), reused 0 (delta 0)
remote:
remote: Create pull request for test:
remote:   https://bitbucket.org/grab-munikris/dbops/pull-requests/new?source=test&t=1
remote:
To bitbucket.org:grab-munikris/dbops.git
 * [new branch]      test -> test
Branch 'test' set up to track remote branch 'test' from 'origin'.
ITIN000007-MAC:dbops munikrishna.chappidi$
<<<<<<<<<<<<<<<<

git add backup.sh
git commit -m "first commit"
git push -u origin master

